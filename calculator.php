<?php
include(__DIR__.'/classes/classResistor.php');
include(__DIR__.'/classes/classConfiguration.php');
include(__DIR__.'/classes/classValidator.php');
include(__DIR__.'/classes/classResults.php');

$folder = str_replace(array('\\','//'),'/',__DIR__.'/');
$ret = @mkdir($folder.'output');

$cfg = new Configuration();
$cfg->loadParameters();
$cfg->validateParameters();
$cfg->displayParameters();
if ($cfg->get('value')==0) $cfg->displayHelp();

$res = new Resistor();
$res->loadResistors($cfg->get('e'),$cfg->get('min'),$cfg->get('max'));
$res->arrangeResistors($cfg->get('value'));

$resCount = $res->count();
echo "resistors=".$resCount;
echo "\n";
if ($resCount<1) die('Not enough resistors to work with. Relax your min and max parameters or choose a higher range.');

$results = new Results($cfg->get('value'),$cfg->get('results'));

$validator = new Validator($cfg,$res,$results);
echo "\n";

$resistorGroups = $cfg->get('count');
//for ($resistorGroup = $resistorGroups; $resistorGroup>1;$resistorGroup--) {
for ($resistorGroup = 2; $resistorGroup<=$resistorGroups;$resistorGroup++) {
    $maxResistors = $resCount;
    //$maxResistors = ($resCount>256) ? 256 : $resCount;
    if ($resistorGroup==2) $maxResistors = ($maxResistors>1024) ? 1024 : $maxResistors;
    if ($resistorGroup==3) $maxResistors = ($maxResistors>512) ? 512 : $maxResistors; 
    if ($resistorGroup==4) $maxResistors = ($maxResistors>128) ? 128 : $maxResistors;
    echo "Resistor groups : ".$resistorGroup." (using $maxResistors unique resistors)\n";
    $ret = generateCombinations($resistorGroup,$maxResistors);
    echo "\nResults so far: ".$results->count()."\n\n";
}
echo "Sorting results... ";
$results->sortResults();
echo " Done.\n\n";
$resultsShow = $cfg->get('results');
 
$value = $cfg->get('value');
$valuePercent = $value/100;

if ($results->count()<$resultsShow) $resultsShow = $results->count();
if ($cfg->get('group')==0) {
    for ($i=0;$i<$resultsShow;$i++) {
        $r = $results->get($i);
        showResult($r);
    }
} else {
    for ($j=2;$j<=$resistorGroups;$j++) {
        for ($i=0;$i<$resultsShow;$i++) {
            $r = $results->get($i);
            if ($r[2]==$j) showResult($r);
        }
    }
}

echo "Exporting results to TXT files...\n";

for ($j=2;$j<=$resistorGroups;$j++) {
    $hOut = fopen($folder.'/output/results_'.$j.'.csv','wb');
    $ret = fwrite($hOut,"Count\tResult\tDeviation\tPercentage\tMode\tGroup 1 Count\tGroup 1 Mode\tGroup 1 Value\tGroup 2 Count\tGroup 2 Mode\tGroup 2 Value\tGroup 3 Count\tGroup 3 Mode\tGroup 3 Value\tGroup 4 Count\tGroup 4 Mode\tGroup 4 Value\n");
    for ($i=0;$i<$results->count();$i++) {
        $r = $results->get($i);
        if ($r[2]==$j) fwrite($hOut,printResult($r));
    }
    fclose($hOut);
}
echo "Done. Files are saved in the Output folder.\n";


function printResult($r) {
    global $value,$valuePercent;
    $deviation = round($r[0]-$value,3);
    $deviationPercentage = round($deviation/$valuePercent,3);
    $text = $r[2]."\t".$r[0]."\t".$deviation."\t".$deviationPercentage."\t";
    $mainMode = "Sum";
    if (strpos($r[1],'+')!==FALSE) $mainMode = "Sum";
    if (strpos($r[1],'|')!==FALSE) $mainMode = "Parallel";
    $text .= $mainMode."\t";
    $line = str_replace(array('+','|'),',',$r[1]);
    $elements = explode(',',$line);
    foreach ($elements as $idx=>$element) {
        $el = trim($element);
        $elCount=1;
        $elMode ='s';
        $elValue = $el;
        if (substr($el,1,1)=='s') { $elCount = substr($el,0,1); $elMode='s'; $elValue = substr($el,2); }
        if (substr($el,1,1)=='p') { $elCount = substr($el,0,1); $elMode='p'; $elValue = substr($el,2); }
        $text .= $elCount."\t".$elMode."\t".$elValue."\t";
    }
    return trim($text,"\t")."\n";
}

function showResult($r) {
    global $value, $valuePercent;
    $diff = $r[0]-$value; if ($diff<0) $diff = 0-$diff;
    $diff = round($diff / $valuePercent,3); 
    $diffs = ''.$diff;
    if ($diff==0) $diffs='0.000';
    if ($diff<10) $diffs = '  '.$diffs;
    if ($diff<100) $diffs = ' '.$diffs;
    if (strpos($diffs,'.')===FALSE) $diffs .='.';
    $diffs = str_pad($diffs,8,'0',STR_PAD_RIGHT);
    echo $r[2].' '.str_pad($r[0],10,' ',STR_PAD_LEFT).' '.$diffs.'% '.$r[1]."\n";
}

function combinationCount($dim,$max) {
    // precalculated number of unique combinations, purely for "progress bar" purposes
    // 2: 1024, 3: 512 4: 128
    $combs[2] = array(0, 0x1, 0x3, 0x6, 0xa, 0xf, 0x15, 0x1c, 0x24, 0x2d, 0x37, 0x42, 0x4e, 0x5b, 0x69, 0x78, 0x88, 0x99, 0xab, 0xbe, 0xd2, 0xe7, 0xfd, 0x114, 0x12c, 0x145, 0x15f, 0x17a, 0x196, 0x1b3, 0x1d1, 0x1f0, 0x210, 0x231, 0x253, 0x276, 0x29a, 0x2bf, 0x2e5, 0x30c, 0x334, 0x35d, 0x387, 0x3b2, 0x3de, 0x40b, 0x439, 0x468, 0x498, 0x4c9, 0x4fb, 0x52e, 0x562, 0x597, 0x5cd, 0x604, 0x63c, 0x675, 0x6af, 0x6ea, 0x726, 0x763, 0x7a1, 0x7e0, 0x820, 0x861, 0x8a3, 0x8e6, 0x92a, 0x96f, 0x9b5, 0x9fc, 0xa44, 0xa8d, 0xad7, 0xb22, 0xb6e, 0xbbb, 0xc09, 0xc58, 0xca8, 0xcf9, 0xd4b, 0xd9e, 0xdf2, 0xe47, 0xe9d, 0xef4, 0xf4c, 0xfa5, 0xfff, 0x105a, 0x10b6, 0x1113, 0x1171, 0x11d0, 0x1230, 0x1291, 0x12f3, 0x1356, 0x13ba, 0x141f, 0x1485, 0x14ec, 0x1554, 0x15bd, 0x1627, 0x1692, 0x16fe, 0x176b, 0x17d9, 0x1848, 0x18b8, 0x1929, 0x199b, 0x1a0e, 0x1a82, 0x1af7, 0x1b6d, 0x1be4, 0x1c5c, 0x1cd5, 0x1d4f, 0x1dca, 0x1e46,0x1ec3, 0x1f41, 0x1fc0, 0x2040, 0x20c1, 0x2143, 0x21c6, 0x224a, 0x22cf, 0x2355, 0x23dc, 0x2464, 0x24ed, 0x2577, 0x2602, 0x268e, 0x271b, 0x27a9, 0x2838, 0x28c8, 0x2959, 0x29eb, 0x2a7e, 0x2b12, 0x2ba7, 0x2c3d, 0x2cd4, 0x2d6c, 0x2e05, 0x2e9f, 0x2f3a, 0x2fd6, 0x3073, 0x3111, 0x31b0, 0x3250, 0x32f1, 0x3393, 0x3436, 0x34da, 0x357f, 0x3625, 0x36cc, 0x3774, 0x381d, 0x38c7, 0x3972, 0x3a1e, 0x3acb, 0x3b79, 0x3c28, 0x3cd8, 0x3d89, 0x3e3b, 0x3eee, 0x3fa2, 0x4057, 0x410d, 0x41c4, 0x427c, 0x4335, 0x43ef, 0x44aa, 0x4566, 0x4623, 0x46e1, 0x47a0, 0x4860, 0x4921, 0x49e3, 0x4aa6, 0x4b6a, 0x4c2f, 0x4cf5, 0x4dbc, 0x4e84, 0x4f4d, 0x5017, 0x50e2, 0x51ae, 0x527b, 0x5349, 0x5418, 0x54e8, 0x55b9, 0x568b, 0x575e, 0x5832, 0x5907, 0x59dd, 0x5ab4, 0x5b8c, 0x5c65, 0x5d3f, 0x5e1a, 0x5ef6, 0x5fd3, 0x60b1, 0x6190, 0x6270,0x6351, 0x6433, 0x6516, 0x65fa, 0x66df, 0x67c5, 0x68ac, 0x6994, 0x6a7d, 0x6b67, 0x6c52, 0x6d3e, 0x6e2b, 0x6f19, 0x7008, 0x70f8, 0x71e9, 0x72db, 0x73ce, 0x74c2, 0x75b7, 0x76ad, 0x77a4, 0x789c, 0x7995, 0x7a8f, 0x7b8a, 0x7c86, 0x7d83, 0x7e81, 0x7f80, 0x8080, 0x8181, 0x8283, 0x8386, 0x848a, 0x858f, 0x8695, 0x879c, 0x88a4, 0x89ad, 0x8ab7, 0x8bc2, 0x8cce, 0x8ddb, 0x8ee9, 0x8ff8, 0x9108, 0x9219, 0x932b, 0x943e, 0x9552, 0x9667, 0x977d, 0x9894, 0x99ac, 0x9ac5, 0x9bdf, 0x9cfa, 0x9e16, 0x9f33, 0xa051, 0xa170, 0xa290, 0xa3b1, 0xa4d3, 0xa5f6, 0xa71a, 0xa83f, 0xa965, 0xaa8c, 0xabb4, 0xacdd, 0xae07, 0xaf32, 0xb05e, 0xb18b, 0xb2b9, 0xb3e8, 0xb518, 0xb649, 0xb77b, 0xb8ae, 0xb9e2, 0xbb17, 0xbc4d, 0xbd84, 0xbebc, 0xbff5, 0xc12f, 0xc26a, 0xc3a6, 0xc4e3, 0xc621, 0xc760, 0xc8a0, 0xc9e1, 0xcb23, 0xcc66, 0xcdaa,0xceef, 0xd035, 0xd17c, 0xd2c4, 0xd40d, 0xd557, 0xd6a2, 0xd7ee, 0xd93b, 0xda89, 0xdbd8, 0xdd28, 0xde79, 0xdfcb, 0xe11e, 0xe272, 0xe3c7, 0xe51d, 0xe674, 0xe7cc, 0xe925, 0xea7f, 0xebda, 0xed36, 0xee93, 0xeff1, 0xf150, 0xf2b0, 0xf411, 0xf573, 0xf6d6, 0xf83a, 0xf99f, 0xfb05, 0xfc6c, 0xfdd4, 0xff3d, 0x100a7, 0x10212, 0x1037e, 0x104eb, 0x10659, 0x107c8, 0x10938, 0x10aa9, 0x10c1b, 0x10d8e, 0x10f02, 0x11077, 0x111ed, 0x11364, 0x114dc, 0x11655, 0x117cf, 0x1194a, 0x11ac6, 0x11c43, 0x11dc1, 0x11f40, 0x120c0, 0x12241, 0x123c3, 0x12546, 0x126ca, 0x1284f, 0x129d5, 0x12b5c, 0x12ce4, 0x12e6d, 0x12ff7, 0x13182, 0x1330e, 0x1349b, 0x13629, 0x137b8, 0x13948, 0x13ad9, 0x13c6b, 0x13dfe, 0x13f92, 0x14127, 0x142bd, 0x14454, 0x145ec, 0x14785, 0x1491f, 0x14aba, 0x14c56, 0x14df3, 0x14f91, 0x15130, 0x152d0, 0x15471, 0x15613, 0x157b6, 0x1595a, 0x15aff, 0x15ca5, 0x15e4c, 0x15ff4, 0x1619d, 0x16347, 0x164f2, 0x1669e, 0x1684b, 0x169f9, 0x16ba8, 0x16d58, 0x16f09, 0x170bb, 0x1726e, 0x17422, 0x175d7, 0x1778d, 0x17944, 0x17afc, 0x17cb5, 0x17e6f, 0x1802a, 0x181e6, 0x183a3, 0x18561, 0x18720, 0x188e0, 0x18aa1, 0x18c63, 0x18e26, 0x18fea, 0x191af, 0x19375, 0x1953c, 0x19704, 0x198cd, 0x19a97, 0x19c62, 0x19e2e, 0x19ffb, 0x1a1c9, 0x1a398, 0x1a568, 0x1a739, 0x1a90b, 0x1aade, 0x1acb2, 0x1ae87, 0x1b05d, 0x1b234, 0x1b40c, 0x1b5e5, 0x1b7bf, 0x1b99a, 0x1bb76, 0x1bd53, 0x1bf31, 0x1c110, 0x1c2f0, 0x1c4d1, 0x1c6b3, 0x1c896, 0x1ca7a, 0x1cc5f, 0x1ce45, 0x1d02c, 0x1d214, 0x1d3fd, 0x1d5e7, 0x1d7d2, 0x1d9be, 0x1dbab, 0x1dd99, 0x1df88, 0x1e178, 0x1e369, 0x1e55b, 0x1e74e, 0x1e942, 0x1eb37, 0x1ed2d, 0x1ef24, 0x1f11c, 0x1f315, 0x1f50f, 0x1f70a, 0x1f906, 0x1fb03, 0x1fd01, 0x1ff00, 0x20100, 0x20301, 0x20503, 0x20706, 0x2090a, 0x20b0f, 0x20d15, 0x20f1c, 0x21124, 0x2132d, 0x21537, 0x21742, 0x2194e, 0x21b5b, 0x21d69, 0x21f78, 0x22188, 0x22399, 0x225ab, 0x227be, 0x229d2, 0x22be7, 0x22dfd, 0x23014, 0x2322c, 0x23445, 0x2365f, 0x2387a, 0x23a96, 0x23cb3, 0x23ed1, 0x240f0, 0x24310, 0x24531, 0x24753, 0x24976, 0x24b9a, 0x24dbf, 0x24fe5, 0x2520c, 0x25434, 0x2565d, 0x25887, 0x25ab2, 0x25cde, 0x25f0b, 0x26139, 0x26368, 0x26598, 0x267c9, 0x269fb, 0x26c2e, 0x26e62, 0x27097, 0x272cd, 0x27504, 0x2773c, 0x27975, 0x27baf, 0x27dea, 0x28026, 0x28263, 0x284a1, 0x286e0, 0x28920, 0x28b61, 0x28da3, 0x28fe6, 0x2922a, 0x2946f, 0x296b5, 0x298fc, 0x29b44, 0x29d8d, 0x29fd7, 0x2a222, 0x2a46e, 0x2a6bb, 0x2a909, 0x2ab58, 0x2ada8, 0x2aff9, 0x2b24b, 0x2b49e, 0x2b6f2, 0x2b947, 0x2bb9d, 0x2bdf4, 0x2c04c, 0x2c2a5, 0x2c4ff, 0x2c75a, 0x2c9b6, 0x2cc13, 0x2ce71, 0x2d0d0, 0x2d330, 0x2d591, 0x2d7f3, 0x2da56, 0x2dcba, 0x2df1f, 0x2e185, 0x2e3ec, 0x2e654, 0x2e8bd, 0x2eb27, 0x2ed92, 0x2effe, 0x2f26b, 0x2f4d9, 0x2f748, 0x2f9b8, 0x2fc29, 0x2fe9b, 0x3010e, 0x30382, 0x305f7, 0x3086d, 0x30ae4, 0x30d5c, 0x30fd5, 0x3124f, 0x314ca, 0x31746, 0x319c3, 0x31c41, 0x31ec0, 0x32140, 0x323c1, 0x32643, 0x328c6, 0x32b4a, 0x32dcf, 0x33055, 0x332dc, 0x33564, 0x337ed, 0x33a77, 0x33d02, 0x33f8e, 0x3421b, 0x344a9, 0x34738, 0x349c8, 0x34c59, 0x34eeb, 0x3517e, 0x35412, 0x356a7, 0x3593d, 0x35bd4, 0x35e6c, 0x36105, 0x3639f, 0x3663a, 0x368d6, 0x36b73, 0x36e11, 0x370b0, 0x37350, 0x375f1, 0x37893, 0x37b36, 0x37dda, 0x3807f, 0x38325, 0x385cc, 0x38874, 0x38b1d, 0x38dc7, 0x39072, 0x3931e, 0x395cb, 0x39879, 0x39b28, 0x39dd8, 0x3a089, 0x3a33b, 0x3a5ee, 0x3a8a2, 0x3ab57, 0x3ae0d, 0x3b0c4, 0x3b37c, 0x3b635, 0x3b8ef, 0x3bbaa, 0x3be66, 0x3c123, 0x3c3e1, 0x3c6a0, 0x3c960, 0x3cc21, 0x3cee3, 0x3d1a6, 0x3d46a, 0x3d72f, 0x3d9f5, 0x3dcbc, 0x3df84, 0x3e24d, 0x3e517, 0x3e7e2, 0x3eaae, 0x3ed7b, 0x3f049, 0x3f318, 0x3f5e8, 0x3f8b9, 0x3fb8b, 0x3fe5e, 0x40132, 0x40407, 0x406dd, 0x409b4, 0x40c8c, 0x40f65, 0x4123f, 0x4151a, 0x417f6, 0x41ad3, 0x41db1, 0x42090, 0x42370, 0x42651, 0x42933, 0x42c16, 0x42efa, 0x431df, 0x434c5, 0x437ac, 0x43a94, 0x43d7d, 0x44067, 0x44352, 0x4463e, 0x4492b, 0x44c19, 0x44f08, 0x451f8, 0x454e9, 0x457db, 0x45ace, 0x45dc2, 0x460b7, 0x463ad, 0x466a4, 0x4699c, 0x46c95, 0x46f8f, 0x4728a, 0x47586, 0x47883, 0x47b81, 0x47e80, 0x48180, 0x48481, 0x48783, 0x48a86, 0x48d8a, 0x4908f, 0x49395, 0x4969c, 0x499a4, 0x49cad, 0x49fb7, 0x4a2c2, 0x4a5ce, 0x4a8db, 0x4abe9, 0x4aef8, 0x4b208, 0x4b519, 0x4b82b, 0x4bb3e, 0x4be52, 0x4c167, 0x4c47d, 0x4c794, 0x4caac, 0x4cdc5, 0x4d0df, 0x4d3fa, 0x4d716, 0x4da33, 0x4dd51, 0x4e070, 0x4e390, 0x4e6b1, 0x4e9d3, 0x4ecf6, 0x4f01a, 0x4f33f, 0x4f665, 0x4f98c, 0x4fcb4, 0x4ffdd, 0x50307, 0x50632, 0x5095e, 0x50c8b, 0x50fb9, 0x512e8, 0x51618, 0x51949, 0x51c7b, 0x51fae, 0x522e2, 0x52617, 0x5294d, 0x52c84, 0x52fbc, 0x532f5, 0x5362f, 0x5396a, 0x53ca6, 0x53fe3, 0x54321, 0x54660, 0x549a0, 0x54ce1, 0x55023, 0x55366, 0x556aa, 0x559ef, 0x55d35, 0x5607c, 0x563c4, 0x5670d, 0x56a57, 0x56da2, 0x570ee, 0x5743b, 0x57789, 0x57ad8, 0x57e28, 0x58179, 0x584cb, 0x5881e, 0x58b72, 0x58ec7, 0x5921d, 0x59574, 0x598cc, 0x59c25, 0x59f7f, 0x5a2da, 0x5a636, 0x5a993, 0x5acf1, 0x5b050, 0x5b3b0, 0x5b711, 0x5ba73, 0x5bdd6, 0x5c13a, 0x5c49f, 0x5c805, 0x5cb6c, 0x5ced4, 0x5d23d, 0x5d5a7, 0x5d912, 0x5dc7e, 0x5dfeb, 0x5e359, 0x5e6c8, 0x5ea38, 0x5eda9, 0x5f11b, 0x5f48e, 0x5f802, 0x5fb77, 0x5feed, 0x60264, 0x605dc, 0x60955, 0x60ccf, 0x6104a, 0x613c6, 0x61743, 0x61ac1, 0x61e40, 0x621c0, 0x62541, 0x628c3, 0x62c46, 0x62fca, 0x6334f, 0x636d5, 0x63a5c, 0x63de4, 0x6416d, 0x644f7, 0x64882, 0x64c0e, 0x64f9b, 0x65329, 0x656b8, 0x65a48, 0x65dd9, 0x6616b, 0x664fe, 0x66892, 0x66c27, 0x66fbd, 0x67354, 0x676ec, 0x67a85, 0x67e1f, 0x681ba, 0x68556, 0x688f3, 0x68c91, 0x69030, 0x693d0, 0x69771, 0x69b13, 0x69eb6, 0x6a25a, 0x6a5ff, 0x6a9a5, 0x6ad4c, 0x6b0f4, 0x6b49d, 0x6b847, 0x6bbf2, 0x6bf9e, 0x6c34b, 0x6c6f9, 0x6caa8, 0x6ce58, 0x6d209, 0x6d5bb, 0x6d96e, 0x6dd22, 0x6e0d7, 0x6e48d, 0x6e844, 0x6ebfc, 0x6efb5, 0x6f36f, 0x6f72a, 0x6fae6, 0x6fea3, 0x70261, 0x70620, 0x709e0, 0x70da1, 0x71163, 0x71526, 0x718ea, 0x71caf, 0x72075, 0x7243c, 0x72804, 0x72bcd, 0x72f97, 0x73362, 0x7372e, 0x73afb, 0x73ec9, 0x74298, 0x74668, 0x74a39, 0x74e0b, 0x751de, 0x755b2, 0x75987, 0x75d5d, 0x76134, 0x7650c, 0x768e5, 0x76cbf, 0x7709a, 0x77476, 0x77853, 0x77c31, 0x78010, 0x783f0, 0x787d1, 0x78bb3, 0x78f96, 0x7937a, 0x7975f, 0x79b45, 0x79f2c, 0x7a314, 0x7a6fd, 0x7aae7, 0x7aed2, 0x7b2be, 0x7b6ab, 0x7ba99, 0x7be88, 0x7c278, 0x7c669, 0x7ca5b, 0x7ce4e, 0x7d242, 0x7d637, 0x7da2d, 0x7de24, 0x7e21c, 0x7e615, 0x7ea0f, 0x7ee0a, 0x7f206, 0x7f603, 0x7fa01, 0x7fe00);
    $combs[3] = array(0, 0x1, 0x4, 0xa, 0x14, 0x23, 0x38, 0x54, 0x78, 0xa5, 0xdc, 0x11e, 0x16c, 0x1c7, 0x230,0x2a8, 0x330, 0x3c9, 0x474, 0x532, 0x604, 0x6eb, 0x7e8, 0x8fc, 0xa28, 0xb6d, 0xccc, 0xe46, 0xfdc, 0x118f, 0x1360, 0x1550, 0x1760, 0x1991, 0x1be4, 0x1e5a, 0x20f4, 0x23b3, 0x2698, 0x29a4, 0x2cd8, 0x3035, 0x33bc, 0x376e, 0x3b4c, 0x3f57, 0x4390, 0x47f8, 0x4c90, 0x5159, 0x5654, 0x5b82, 0x60e4, 0x667b, 0x6c48, 0x724c, 0x7888, 0x7efd, 0x85ac, 0x8c96, 0x93bc,0x9b1f, 0xa2c0, 0xaaa0, 0xb2c0, 0xbb21, 0xc3c4, 0xccaa, 0xd5d4, 0xdf43, 0xe8f8, 0xf2f4, 0xfd38, 0x107c5, 0x1129c, 0x11dbe, 0x1292c, 0x134e7, 0x140f0, 0x14d48, 0x159f0, 0x166e9, 0x17434, 0x181d2, 0x18fc4, 0x19e0b, 0x1aca8, 0x1bb9c, 0x1cae8, 0x1da8d, 0x1ea8c, 0x1fae6, 0x20b9c, 0x21caf, 0x22e20, 0x23ff0, 0x25220, 0x264b1, 0x277a4, 0x28afa, 0x29eb4, 0x2b2d3, 0x2c758, 0x2dc44, 0x2f198, 0x30755, 0x31d7c, 0x3340e, 0x34b0c, 0x36277, 0x37a50, 0x39298, 0x3ab50, 0x3c479, 0x3de14, 0x3f822, 0x412a4, 0x42d9b, 0x44908, 0x464ec, 0x48148, 0x49e1d, 0x4bb6c, 0x4d936, 0x4f77c, 0x5163f, 0x53580, 0x55540, 0x57580, 0x59641, 0x5b784, 0x5d94a, 0x5fb94, 0x61e63, 0x641b8, 0x66594, 0x689f8, 0x6aee5, 0x6d45c, 0x6fa5e, 0x720ec, 0x74807, 0x76fb0, 0x797e8, 0x7c0b0, 0x7ea09, 0x813f4, 0x83e72, 0x86984, 0x8952b, 0x8c168, 0x8ee3c, 0x91ba8, 0x949ad, 0x9784c, 0x9a786, 0x9d75c, 0xa07cf, 0xa38e0, 0xa6a90, 0xa9ce0, 0xacfd1, 0xb0364, 0xb379a, 0xb6c74, 0xba1f3, 0xbd818, 0xc0ee4, 0xc4658, 0xc7e75, 0xcb73c, 0xcf0ae, 0xd2acc, 0xd6597, 0xda110, 0xddd38, 0xe1a10, 0xe5799, 0xe95d4, 0xed4c2, 0xf1464, 0xf54bb, 0xf95c8, 0xfd78c, 0x101a08, 0x105d3d, 0x10a12c, 0x10e5d6, 0x112b3c, 0x11715f, 0x11b840, 0x11ffe0, 0x124840, 0x129161, 0x12db44, 0x1325ea, 0x137154, 0x13bd83, 0x140a78, 0x145834, 0x14a6b8, 0x14f605, 0x15461c, 0x1596fe, 0x15e8ac, 0x163b27, 0x168e70, 0x16e288, 0x173770, 0x178d29, 0x17e3b4, 0x183b12, 0x189344, 0x18ec4b, 0x194628, 0x19a0dc, 0x19fc68, 0x1a58cd, 0x1ab60c, 0x1b1426, 0x1b731c, 0x1bd2ef, 0x1c33a0, 0x1c9530, 0x1cf7a0, 0x1d5af1, 0x1dbf24, 0x1e243a, 0x1e8a34, 0x1ef113, 0x1f58d8, 0x1fc184, 0x202b18, 0x209595, 0x2100fc, 0x216d4e, 0x21da8c, 0x2248b7, 0x22b7d0, 0x2327d8, 0x2398d0, 0x240ab9, 0x247d94, 0x24f162, 0x256624, 0x25dbdb,0x265288, 0x26ca2c, 0x2742c8, 0x27bc5d, 0x2836ec, 0x28b276, 0x292efc, 0x29ac7f, 0x2a2b00, 0x2aaa80, 0x2b2b00, 0x2bac81, 0x2c2f04, 0x2cb28a, 0x2d3714, 0x2dbca3, 0x2e4338, 0x2ecad4, 0x2f5378, 0x2fdd25, 0x3067dc, 0x30f39e, 0x31806c, 0x320e47, 0x329d30, 0x332d28, 0x33be30, 0x345049, 0x34e374, 0x3577b2, 0x360d04, 0x36a36b, 0x373ae8, 0x37d37c, 0x386d28, 0x3907ed, 0x39a3cc, 0x3a40c6, 0x3adedc, 0x3b7e0f, 0x3c1e60, 0x3cbfd0, 0x3d6260, 0x3e0611, 0x3eaae4, 0x3f50da, 0x3ff7f4, 0x40a033, 0x414998, 0x41f424, 0x429fd8, 0x434cb5, 0x43fabc, 0x44a9ee, 0x455a4c, 0x460bd7, 0x46be90, 0x477278, 0x482790, 0x48ddd9, 0x499554, 0x4a4e02, 0x4b07e4, 0x4bc2fb, 0x4c7f48, 0x4d3ccc, 0x4dfb88, 0x4ebb7d, 0x4f7cac, 0x503f16, 0x5102bc, 0x51c79f, 0x528dc0, 0x535520, 0x541dc0, 0x54e7a1, 0x55b2c4, 0x567f2a, 0x574cd4, 0x581bc3, 0x58ebf8, 0x59bd74, 0x5a9038, 0x5b6445, 0x5c399c, 0x5d103e, 0x5de82c, 0x5ec167, 0x5f9bf0, 0x6077c8, 0x6154f0, 0x623369, 0x631334, 0x63f452, 0x64d6c4, 0x65ba8b, 0x669fa8, 0x67861c, 0x686de8, 0x69570d,0x6a418c, 0x6b2d66, 0x6c1a9c, 0x6d092f, 0x6df920, 0x6eea70, 0x6fdd20, 0x70d131, 0x71c6a4, 0x72bd7a, 0x73b5b4, 0x74af53, 0x75aa58, 0x76a6c4, 0x77a498, 0x78a3d5, 0x79a47c, 0x7aa68e, 0x7baa0c, 0x7caef7, 0x7db550, 0x7ebd18, 0x7fc650, 0x80d0f9, 0x81dd14, 0x82eaa2, 0x83f9a4, 0x850a1b, 0x861c08, 0x872f6c, 0x884448, 0x895a9d, 0x8a726c, 0x8b8bb6, 0x8ca67c, 0x8dc2bf, 0x8ee080, 0x8fffc0, 0x912080, 0x9242c1, 0x936684, 0x948bca, 0x95b294, 0x96dae3, 0x9804b8, 0x993014, 0x9a5cf8, 0x9b8b65, 0x9cbb5c, 0x9decde, 0x9f1fec, 0xa05487, 0xa18ab0, 0xa2c268, 0xa3fbb0, 0xa53689, 0xa672f4, 0xa7b0f2, 0xa8f084, 0xaa31ab, 0xab7468, 0xacb8bc, 0xadfea8, 0xaf462d, 0xb08f4c, 0xb1da06, 0xb3265c, 0xb4744f, 0xb5c3e0, 0xb71510, 0xb867e0, 0xb9bc51, 0xbb1264, 0xbc6a1a, 0xbdc374, 0xbf1e73, 0xc07b18, 0xc1d964, 0xc33958, 0xc49af5, 0xc5fe3c, 0xc7632e, 0xc8c9cc, 0xca3217, 0xcb9c10, 0xcd07b8, 0xce7510, 0xcfe419, 0xd154d4, 0xd2c742, 0xd43b64, 0xd5b13b, 0xd728c8, 0xd8a20c, 0xda1d08, 0xdb99bd, 0xdd182c, 0xde9856, 0xe01a3c, 0xe19ddf,0xe32340, 0xe4aa60, 0xe63340, 0xe7bde1, 0xe94a44, 0xead86a, 0xec6854, 0xedfa03, 0xef8d78, 0xf122b4, 0xf2b9b8, 0xf45285, 0xf5ed1c, 0xf7897e, 0xf927ac, 0xfac7a7, 0xfc6970, 0xfe0d08, 0xffb270, 0x10159a9, 0x10302b4, 0x104ad92, 0x1065a44, 0x10808cb, 0x109b928, 0x10b6b5c, 0x10d1f68, 0x10ed54d, 0x1108d0c, 0x11246a6, 0x114021c, 0x115bf6f, 0x1177ea0, 0x1193fb0, 0x11b02a0, 0x11cc771, 0x11e8e24, 0x12056ba, 0x1222134, 0x123ed93, 0x125bbd8, 0x1278c04, 0x1295e18, 0x12b3215, 0x12d07fc, 0x12edfce, 0x130b98c, 0x1329537, 0x13472d0, 0x1365258, 0x13833d0, 0x13a1739, 0x13bfc94, 0x13de3e2, 0x13fcd24, 0x141b85b, 0x143a588, 0x14594ac, 0x14785c8, 0x14978dd, 0x14b6dec, 0x14d64f6, 0x14f5dfc, 0x15158ff, 0x1535600, 0x1555500);
    $combs[4] = array(0, 0x1, 0x5, 0xf, 0x23, 0x46, 0x7e, 0xd2, 0x14a, 0x1ef, 0x2cb, 0x3e9, 0x555, 0x71c, 0x94c, 0xbf4,0xf24, 0x12ed, 0x1761, 0x1c93, 0x2297, 0x2982, 0x316a, 0x3a66, 0x448e, 0x4ffb, 0x5cc7, 0x6b0d, 0x7ae9, 0x8c78, 0x9fd8, 0xb528, 0xcc88, 0xe619, 0x101fd, 0x12057, 0x1414b, 0x164fe, 0x18b96, 0x1b53a, 0x1e212, 0x21247, 0x24603, 0x27d71, 0x2b8bd, 0x2f814, 0x33ba4, 0x3839c, 0x3d02c, 0x42185, 0x477d9, 0x4d35b, 0x5343f, 0x59aba, 0x60702, 0x6794e, 0x6f1d6, 0x770d3, 0x7f67f, 0x88315, 0x916d1, 0x9b1f0, 0xa54b0, 0xaff50, 0xbb210, 0xc6d31, 0xd30f5, 0xdfd9f, 0xed373, 0xfb2b6, 0x109bae, 0x118ea2, 0x128bda, 0x13939f, 0x14a63b, 0x15c3f9, 0x16ed25, 0x18220c, 0x1962fc, 0x1ab044, 0x1c0a34, 0x1d711d, 0x1ee551, 0x206723, 0x21f6e7, 0x2394f2, 0x25419a, 0x26fd36, 0x28c81e, 0x2aa2ab, 0x2c8d37, 0x2e881d, 0x3093b9, 0x32b068, 0x34de88, 0x371e78, 0x397098, 0x3bd549, 0x3e4ced, 0x40d7e7, 0x43769b, 0x46296e, 0x48f0c6, 0x4bcd0a, 0x4ebea2, 0x51c5f7, 0x54e373, 0x581781, 0x5b628d, 0x5ec504, 0x623f54, 0x65d1ec, 0x697d3c, 0x6d41b5, 0x711fc9, 0x7517eb, 0x792a8f, 0x7d582a, 0x81a132, 0x86061e, 0x8a8766, 0x8f2583, 0x93e0ef, 0x98ba25, 0x9db1a1, 0xa2c7e0, 0xa7fd60, 0xad52a0);
    //for ($i=0;$i<count($combs[4]);$i++) echo '0x'.dechex($combs[4][$i]).', ';
    return $combs[$dim][$max];
}

function generateCombinations($dim,$max) {
    global $validator;
    if (($dim<2) || ($dim>4) || ($max<1)) return false;
    $totalCombinations = combinationCount($dim,$max);
    $step = ceil($totalCombinations/50); if ($step<1) $step=1;
    $count = 0;
    echo "Processing ".$totalCombinations." combinations...\n";
    $limit = $max;

    if ($dim==2) {
        for ($j=0;$j<$limit;$j++) {
            for ($i=$j;$i<$limit;$i++){
                $count++;
                $validator->checkCombination(array($j,$i));
                if ($count==$step) { echo '.'; $count=0;}
            }
        }
    }

    if ($dim==3) {
            for ($k=0;$k<$limit;$k++) {
                for ($j=$k;$j<$limit;$j++) {
                    for ($i=$j;$i<$limit;$i++){
                        $count++;
                        $validator->checkCombination(array($k,$j,$i));
                        if ($count==$step) { echo '.'; $count=0;}
                    }
                }
            }
    }

    if ($dim==4) {
        for ($l=0;$l<$limit;$l++) {
            for ($k=$l;$k<$limit;$k++) {
                for ($j=$k;$j<$limit;$j++) {
                    for ($i=$j;$i<$limit;$i++){
                        $count++;
                        $validator->checkCombination(array($l,$k,$j,$i));
                        if ($count==$step) { echo '.'; $count=0;}
                    }
                }
            }
        }
    }
    echo " Done.\n";

}

function helper_PreCalculateCombinationCount() {
    for ($m=1;$m<1024;$m++) {
    $limit = $m;
    $prev = array(0,0,0,0);
    $count = 0;
    //$h = fopen('c:/temp/out.bin','wb');
    $buffer = '';
        //for ($l=0;$l<$limit;$l++) {
        //for ($k=0;$k<$limit;$k++) {
            for ($j=0;$j<$limit;$j++) {
                for ($i=$j;$i<$limit;$i++){
                    $count++;

                }
            }
        // }
        //}
    echo ' 0x'.dechex($count).", ";
    }
}
?>